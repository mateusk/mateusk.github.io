import * as React from "react"
import {
    Frame,
    addPropertyControls,
    ControlType,
    Navigation,
    RenderTarget,
} from "framer"
import { url } from "framer/resource"

const iphone11black = "./devices/iphone-11-black.png"
const iphone11white = "./devices/iphone-11-white.png"
const iphone11green = "./devices/iphone-11-green.png"
const iphone11red = "./devices/iphone-11-red.png"
const iphone11yellow = "./devices/iphone-11-yellow.png"
const iphone11purple = "./devices/iphone-11-purple.png"

const deviceWidth = Math.round(1068 / 2)
const deviceHeight = Math.round(2032 / 2)
const screenWidth = 414
const screenHeight = 896
const padding = 20

export function IPhone11({ children, width, height, color, image, type }) {
    const frames = type || "black"
    const colors = {
        black: iphone11black,
        white: iphone11white,
        green: iphone11green,
        red: iphone11red,
        yellow: iphone11yellow,
        purple: iphone11purple,
    }

    // Scale -------------------------
    const scaleX = width / (deviceWidth + 2 * padding)
    const scaleY = height / (deviceHeight + 2 * padding)
    const scale = Math.min(scaleX, scaleY, 1)

    const child = children && children[0]
    const resizedChild =
        child && React.isValidElement(child)
            ? React.cloneElement(child, {
                  width: screenWidth,
                  height: screenHeight,
              })
            : null

    const isCanvas =
        RenderTarget.current() === RenderTarget.canvas ||
        RenderTarget.current() === RenderTarget.export
    const childWithNavigation = resizedChild ? (
        <Navigation>{resizedChild}</Navigation>
    ) : null

    return (
        <Frame
            size={"100%"}
            backgroundColor={color}
            image={image}
            overflow={"hidden"}
        >
            <div
                style={{
                    display: "flex",
                    placeItems: "center",
                    placeContent: "center",
                    width: "100%",
                    height: "100%",
                    transform: `scale(${scale})`,
                }}
            >
                <Frame
                    width={deviceWidth}
                    height={deviceHeight}
                    image={url(colors[frames])}
                    backgroundColor={"transparent"}
                    style={{
                        imageRendering: "auto",
                        backgroundSize: "contain",
                        backgroundPosition: "center",
                        backgroundRepeat: "no-repeat",
                    }}
                ></Frame>

                <Frame
                    center={true}
                    backgroundColor={"#000"}
                    style={{
                        width: screenWidth,
                        height: screenHeight,
                        WebkitMaskImage: makeMask(screenWidth, screenWidth),
                        maskSize: "contain",
                        WebkitMaskSize: "contain",
                    }}
                >
                    {isCanvas ? resizedChild : childWithNavigation}
                </Frame>
            </div>
        </Frame>
    )
}

function makeMask(screenWidth, screenHeight) {
    const path =
        '<path d="M85.5 0A6.5 6.5 0 0192 6.5c.336 6.081 1.525 9.937 3.406 13.455 2.222 4.155 5.484 7.417 9.64 9.64C109.2 31.815 113.867 33 121.962 33h170.074c8.095 0 12.762-1.184 16.918-3.406 4.155-2.222 7.417-5.484 9.64-9.64 1.88-3.516 3.027-7.413 3.405-13.454a6.5 6.5 0 016.5-6.5h32.3c18.498 0 25.207 1.926 31.97 5.543 6.763 3.617 12.07 8.924 15.687 15.687C412.074 27.993 414 34.702 414 53.2v789.6c0 18.498-1.926 25.207-5.543 31.97-3.617 6.763-8.924 12.07-15.687 15.687-6.763 3.617-13.472 5.543-31.97 5.543H53.2c-18.498 0-25.207-1.926-31.97-5.543-6.763-3.617-12.07-8.924-15.687-15.687C1.926 868.007 0 861.298 0 842.8V53.2c0-18.498 1.926-25.207 5.543-31.97C9.16 14.467 14.467 9.16 21.23 5.543 27.993 1.926 34.702 0 53.2 0h32.3z" />'

    const encoded = encodeURIComponent(
        `<svg xmlns="http://www.w3.org/2000/svg" viewport="0 0 ${screenWidth} ${screenHeight}" preserveAspectRatio="none"><g x="0" y="0">${path}</g></svg>`
    )
    return `url("data:image/svg+xml;utf8,${encoded}")`
}

IPhone11.defaultProps = {
    color: "#000",
    width: 1200,
    height: 1200,
    type: "black",
}

IPhone11.displayName = "iPhone 11"

addPropertyControls(IPhone11, {
    type: {
        type: ControlType.Enum,
        defaultValue: "black",
        options: ["black", "white", "green", "red", "yellow", "purple"],
        optionTitles: ["Black", "White", "Green", "Red", "Yellow", "Purple"],
        title: "Color",
    },
    color: { type: ControlType.Color, title: "Fill" },
    image: {
        type: ControlType.File,
        allowedFileTypes: ["jpg", "png", "jpeg"],
        title: "Image",
    },
})
